#!/usr/bin/env bash
#----------------------------------------------------------------------------------+
# autor  : Abner Benedito
# github : ghostkill73
#
declare _ckx_version="v0.0.5-dev"
#
# licença: GPLv3+
#----------------------------------------------------------------------------------+
#
# CryptoKnightX é uma fork!
# Projeto originado por Jefferson Rocha:
# <https://notabug.org/slackjeff/knight>
#
#----------------------------------------------------------------------------------+
# Copyright (C) 2024  Abner Benedito
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#----------------------------------------------------------------------------------+
# DESCRIÇÃO:
#
# O objetivo deste software é manter a segurança e integridade de seus arquivos.
# O CKX foi feito em sua maior parte em bash script puro, isso significa que ele
# funcionará corretamenta na maioria das distribuições linux, sem que tenham de
# depender de muitos pacotes terceiros.
#
# Dependências fundamentais:
#	- GNU Tar 1.30+
#	- GNU Privacy Guard (gpg) 2.2+
#	- GNU Bash (Bourne-Again Shell) 3+
# *** o software ainda está em fase de testes, a versão das dependências
# podem não corresponder com oque está sendo exigido. ***
#
# Avisos:
#
#	* * * Os desenvolvedores deste software não se responsabilizam
#	pelo uso indevido desta ferramenta; * * *
#
#	* O CKX não segue o padrão SHELL POSIX;
#
#	* Certifique-se de não perder sua senha dos arquivos
#	criptografados, se perder já era! a chance de conseguir
#	quebrar a criptografia é mínima;
#
#	* Nenhum sistema é seguro, proteja sua integridade.
#	tenha em mente que um dia você será hackeado, procure
#	reduzir riscos. Não utilize somente o CKX para proteger
#	seus arquivos mas também proteja sua máquina como um
#	todo.
#
# Boas práticas:
#
#	* ter uma senha de usuário root forte;
#
#	* criptografar o armazenamento(HDD,SSD,...) da máquina;
#
#	* utilizar uma senha com no mínimo 8 caracteres
#	sem possuir um padrão óbvio, colocando caracteres
#	como `#$@%`;
#
#	* troca periódica das senhas;
#
#	* se possível utilize gerenciadores de senhas off-line
#	como o `keepassXC` por exemplo, donde possibilita copiar
#	e colar a sua senha;
#
#	* Fazer backups constantes e armazená-los em um local
#	seguro;
#
# Contribuindo:
#
#	* Sempre procure fazer um script puro, utilizando os recursos
#	que o BASH possue;
#
#	* Não adicione utilitários terceiros não-livres e/ou que fujam
# 	do escopo das dependências fundamentais do software;
#
#	* Certifique-se de que as modificações estão corretas, livres
#	de problemas.
#
#----------------------------------------------------------------------------------+

########################################################################################
#
# DEBUG
# - utilize o debug para verificar erros
#
########################################################################################

#set -x


########################################################################################
#
# Variáveis globais
# - nome do software
# - diretório principal
# - variáveis de retorno
# - variáveis de configuração
#
########################################################################################

set -u

declare _ckx_software_name="CryptoKnightX"
declare _ckx_dir="$HOME/.ckx"
declare _ckx_lib="${_ckx_dir}/lib"
declare _ckx_data="${_ckx_dir}/data"

declare _ckx_true=0
declare _ckx_false=1
declare _ckx_error=2

declare _global_cdpath="$PWD"

# gpgconf padrão
: ${s2k_mode:=3}
: ${s2k_count:=65536}
: ${s2k_digest_algo:=SHA256}
: ${s2k_cipher_algo:=AES256}
[[ "${_gpgconf_use_symkey:=true}" = 'true' ]] || {
	: ${_gpgconf_recipient?"o email chave privada não está definido, utilize 'ckx --configure-encryption'."}
}
: ${_gpgconf_recipient:=none}


########################################################################################
#
# utilitários para exibir mensagens
#
########################################################################################

msg()
{
	printf '%b\n' "$*" 2>/dev/null
}

die()
{
	msg "\e[41m[!] ${*}\e[m"

	exit "$_ckx_error"
}

sucess()
{
	msg "\e[1;32m[*] ${*}\e[m"
}

warn()
{
	msg "\e[1;33m[#] ${*}\e[m"
}


########################################################################################
#
# pré-verificação
# - verificando root
# - verificando gpg e tar
# - verificando HOME
# - verificando $HOME/.ckx/{lib,data}
#
########################################################################################

# verificando gpg
[[ -n "$(type -P gpg)" ]] || [[ -n "$(type -P gpg2)" ]] || {
	die "utilitário gpg/gpg2 não instalado."
}

# verificando tar
[[ -n "$(type -P tar)" ]] || {
	die "utilitário TAR não instalado."
}

# verificando se $HOME está definido.
: ${HOME?"a variável HOME não está definida."}

# verificando se $HOME/.ckx existe, caso contrário cria o diretório.
[[ -d "$_ckx_dir" ]] || {
	mkdir -p "$_ckx_dir" 2>&-
	mkdir -p "$_ckx_lib" 2>&-
	mkdir -p "$_ckx_data" 2>&-
}


########################################################################################
#
# sources
#
########################################################################################

# configurações da criptografia
source ${_ckx_lib}/gpgconf 2>&-

# arquivos de configuração do usuário
source ${_ckx_lib}/*.conf 2>&-


########################################################################################
#
# informações
#
########################################################################################

short_license()
{
	msg " ${_ckx_software_name} ${_ckx_version}"
	msg " This program comes with ABSOLUTELY NO WARRANTY"
	msg " This is free software, and you are welcome to redistribute it"
	msg " under certain conditions."
	msg ""
	msg " Digite a opção '--help' para mais detalhes."

	exit "$_ckx_true"
}

display_license()
{
	msg " ${_ckx_software_name} ${_ckx_version} Copyright (C) 2024  Abner Benedito"
	msg ""
	msg " This program is free software: you can redistribute it and/or modify"
	msg " it under the terms of the GNU General Public License as published by"
	msg " the Free Software Foundation, either version 3 of the License, or"
	msg " (at your option) any later version."
	msg ""
	msg " This program is distributed in the hope that it will be useful,"
	msg " but WITHOUT ANY WARRANTY; without even the implied warranty of"
	msg " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
	msg " GNU General Public License for more details."
	msg ""
	msg " You should have received a copy of the GNU General Public License"
	msg " along with this program.  If not, see <https://www.gnu.org/licenses/>."

	exit "$_ckx_true"
}


display_version()
{
	msg " ${_ckx_software_name} ${_ckx_version} <github.com/ghostkill73/CryptoKnightX>"

	exit "$_ckx_true"
}

display_error()
{
	msg " A opção '"$1"' não existe"
	msg ""
	msg " Digite a opção '--help' para mais detalhes."

	exit "$_ckx_false"
}

display_help()
{
	msg "${_ckx_software_name} ${_ckx_version}"
	msg " This program comes with ABSOLUTELY NO WARRANTY"
	msg " This is free software, and you are welcome to redistribute it"
	msg " under certain conditions."
	msg ""
	msg " CryptoKnightX é um encriptador de arquivos ocultos."
	msg ""
	msg " ckx [OPÇÃO]"
	msg " ckx --encrypt <file>"
	msg " ckx --decrypt <file.gpg>"
	msg ""
	msg ""
	msg "  -h, --help                 exibe esta mensagem."
	msg ""
	msg "  -v, --version              exibe a versão do software."
	msg ""
	msg "  -l, --license              exibe a licença do software."
	msg ""
	msg "  -s, --start                inicia o software."
	msg ""
	msg "  -E, --encrypt              criptografa um arquivo."
	msg ""
	msg "  -D, --decrypt              descriptografa um arquivo."
	msg ""
	msg "  --configure-encryption     opção para configurar a criptografia no"
	msg "                              modo questionário."
	msg ""
	msg " contribua: <github.com/ghostkill73/CryptoKnightX>"

	exit "$_ckx_true"
}


########################################################################################
#
# Configurações
# - gpgconf
#
########################################################################################

libgpgconf()
{
	local _gpgconf_yorn \
	_gpgconf_mode \
	_gpgconf_int \
	_gpgconf_hash \
	_gpgconf_cipher \
	_gpgconf_symkey \
	_gpgconf_line \
	_gpgconf_email="none" \
	_gpgconf_secret_keys

	msg "${_ckx_software_name} ${_ckx_version}"
	msg "Configuração de criptografia do software"
	msg ""
	msg "definições atuais do gpgconf:"
	msg ""
	msg " s2k-mode                   = ${s2k_mode}"
	msg " s2k-count                  = ${s2k_count}"
	msg " s2k-digest-algo            = ${s2k_digest_algo}"
	msg " s2k-cipher-algo            = ${s2k_cipher_algo}"
	msg " use symmetric cryptography = ${_gpgconf_use_symkey}"
	msg " private key email          = ${_gpgconf_recipient}"
	msg ""

	read -p 'Deseja prosseguir com a configuração? (y/N): ' _gpgconf_yorn

	case "${_gpgconf_yorn,,}" in
	y*) :;;
	n*)
		warn "operação cancelada"
		exit "$_ckx_true"
	;;
	*) die "Opção inválida." ;;
	esac

	msg ""
	msg "[s2k-mode] modo de operação"
	msg "define de qual modo a senha mestre será utilizada para criptografar/descriptografar."
	msg " 0: simples          (hash aplicada na senha uma vez)                       [inseguro,      rápido]"
	msg " 1: salteado         (hash aplicada na senha uma vez com salt de 8 bytes)   [intermediário, rápido]"
	msg " 3: salt + interação (hash aplicada na senha 'N' vezes com salt de 8 bytes) [melhor opção,   lento]"

	read -p 'Digite a opção (padrão = 3): ' _gpgconf_mode

	case "$_gpgconf_mode" in
	0|1|3) :;;
	*) _gpgconf_mode=3 ;;
	esac
	msg ""
	warn "s2k-mode=${_gpgconf_mode}"

	msg ""
	msg "[s2k-count] número de interações"
	msg "se o s2k-mode foi definido como 3, s2k-cont define a quantia de interações."
	msg "suporta de 1024 a 65011712 interações"
	msg "quanto maior, mais seguro, porém é mais lento para crip./decrip."

	read -p 'Digite a quantia (padrão = 65536): ' _gpgconf_int

	if [[ "$_gpgconf_int" -gt '65011712' ]]; then

		_gpgconf_int=65011712

	elif [[ "$_gpgconf_int" -lt '1024' ]]; then

		_gpgconf_int=1024

	else

		_gpgconf_int=65536

	fi

	msg ""
	warn "s2k-digest-algo=${_gpgconf_int}"

	msg ""
	msg "[s2k-digest-algo] função hash"
	msg "define qual a função hash que será utilizada nas senhas."
	msg " 1) SHA1"
	msg " 2) RIPEMD160"
	msg " 3) SHA224"
	msg " 4) SHA256"
	msg " 5) SHA384"
	msg " 6) SHA512"
	msg "quanto maior o número da opção, mais seguro, porém é mais lento para crip./decrip."

	read -p "Digite o NÚMERO da opção (padrão = SHA256): " _gpgconf_hash

	case "${_gpgconf_hash,,}" in
	1|sha1*)   _gpgconf_hash=SHA1      ;;
	2|rip*)    _gpgconf_hash=RIPEMD160 ;;
	3|sha22*)  _gpgconf_hash=SHA224    ;;
	4|sha25*)  _gpgconf_hash=SHA256    ;;
	5|sha3*)   _gpgconf_hash=SHA384    ;;
	6|sha5*)   _gpgconf_hash=SHA512    ;;
	*)         _gpgconf_hash=SHA256    ;;
	esac
	msg ""
	warn "s2k-digest-algo=${_gpgconf_hash}"

	msg ""
	msg "[s2k-cipher-algo] método de criptografia"
	msg "define o método de criptografia que será utilizado."
	msg " 1)  IDEA"
	msg " 2)  3DES"
	msg " 3)  CAST5"
	msg " 4)  BLOWFISH"
	msg " 5)  AES"
	msg " 6)  AES192"
	msg " 7)  AES256"
	msg " 8)  TWOFISH"
       	msg " 9)  CAMELLIA128"
	msg " 10) CAMELLIA192"
	msg " 11) CAMELLIA256"
	msg "recomenda-se utilizar AES256, CARAMELLIA256 ou TWOFISH"
	msg "TWOFISH é mais forte comparado a AES/CARAMELLIA, porém é muito mais"
	msg "lento para o processo de criptografia/descriptografia."

	read -p "Digite o NÚMERO da opção (padrão = AES256): " _gpgconf_cipher

	case "${_gpgconf_cipher,,}" in
	1|ide*)         _gpgconf_cipher=IDEA        ;;
	2|3des)         _gpgconf_cipher=3DES        ;;
	3|cast5)        _gpgconf_cipher=CAST5       ;;
	4|blow*)        _gpgconf_cipher=BLOWFISH    ;;
	5|aes)          _gpgconf_cipher=AES         ;;
	6|aes1*)        _gpgconf_cipher=AES192      ;;
	7|aes2*)        _gpgconf_cipher=AES256      ;;
	8|two*)         _gpgconf_cipher=TWOFISH     ;;
	9|camellia12*)  _gpgconf_cipher=CAMELLIA128 ;;
	10|camellia19*) _gpgconf_cipher=CAMELLIA192 ;;
	11|camellia2*)  _gpgconf_cipher=CAMELLIA256 ;;
	*)              _gpgconf_cipher=AES256      ;;
	esac
	msg ""
	warn "s2k-cipher-algo=${_gpgconf_cipher}"

	msg ""
	msg "[_gpgconf_use_symkey] Criptografia simétrica/assimétrica"
	msg "define se o CKX irá utilizar uma senha ou uma chave privada"
	msg "do seu chaveiro gpg para criptografar os arquivos."
	msg " 1) True  (Utilizar senha)"
	msg " 2) False (Utilizar chave privada)"
	msg "Ao utilizar uma chave privada, você precisará digitar a senha apenas"
	msg "ao descritografar o diretório."
	msg "Para gerar uma chave você deve utilizar o comando 'gpg --full-generate-key'."

	read -p "Digite o NÚMERO da opção (padrão = True): " _gpgconf_symkey

	case "${_gpgconf_symkey,,}" in
	1|true)  _gpgconf_symkey=true  ;;
	2|false) _gpgconf_symkey=false ;;
	*)       _gpgconf_symkey=true  ;;
	esac
	msg ""
	warn "_gpgconf_use_symkey=${_gpgconf_symkey}"

	[[ "$_gpgconf_symkey" = 'true' ]] || {
		msg ""
		msg "[_gpgconf_recipient] Email da chave privada"
		msg "define qual chave privada será utilizada."

		read -p "Deseja listar suas chaves privadas? (y/N): " _gpgconf_yorn

		case "${_gpgconf_yorn,,}" in
		y*)
			_gpgconf_secret_keys=$(
				while IFS= read -r _gpgconf_line; do
					[[ "$_gpgconf_line" =~ '@' ]] && msg "$_gpgconf_line"
				done < <(gpg --list-secret-keys)
			)

			if [[ -n "$_gpgconf_secret_keys" ]]; then
				msg "$_gpgconf_secret_keys"
			else
				warn "Nenhuma chave foi encontrada."
			 	warn "Utilize o comando 'gpg --full-generate-key' para gerar uma chave."
				exit "$_ckx_false"
			fi
		;;
		*) :;;
		esac

		read -p "Digite o email de sua chave privada: " _gpgconf_email
	}

	msg ""
	msg "resultado:"
	msg " s2k-mode            = ${_gpgconf_mode}"
	msg " s2k-count           = ${_gpgconf_int}"
	msg " s2k-digest-algo     = ${_gpgconf_hash}"
	msg " s2k-cipher-algo     = ${_gpgconf_cipher}"
	msg " _gpgconf_use_symkey = ${_gpgconf_symkey}"
	msg " _gpgconf_recipient  = ${_gpgconf_email}"
	msg ""

	read -p "Confirma? (y/N): " _gpgconf_yorn

	case "${_gpgconf_yorn,,}" in
	y*) :;;
	n*)
		warn "operação cancelada"
		exit "$_ckx_true"
	;;
	*) die "Opção inválida." ;;
	esac

	[[ -d "$_ckx_lib" ]] || {
		mkdir "$_ckx_lib" 2>&-
		:>${_ckx_lib}/gpgconf
	} && warn "${_ckx_lib}/gpgconf criado"

	msg "# https://www.gnupg.org/documentation/manpage.html">${_ckx_lib}/gpgconf
	msg "declare s2k_mode=${_gpgconf_mode}">>${_ckx_lib}/gpgconf
	msg "declare s2k_count=${_gpgconf_int}">>${_ckx_lib}/gpgconf
	msg "declare s2k_digest_algo=${_gpgconf_hash}">>${_ckx_lib}/gpgconf
	msg "declare s2k_cipher_algo=${_gpgconf_cipher}">>${_ckx_lib}/gpgconf
	msg "declare _gpgconf_use_symkey=${_gpgconf_symkey}">>${_ckx_lib}/gpgconf
	msg "declare _gpgconf_recipient=${_gpgconf_email}">>${_ckx_lib}/gpgconf

	msg ""
	msg "gpgconf:"
	msg "$(<"${_ckx_lib}/gpgconf")" \
	&& sucess "gpgconf configurado com sucesso"

	exit "$_ckx_true"
}

########################################################################################
#
# função principal
#
########################################################################################

function_main_encrypt()
{
	local _enc_opt="$1"
	local _enc_dir="$2"

	case "$_enc_opt" in

	-d) # descriptografando
		warn "${_enc_dir} -> iniciando descriptografia."

		if [[ "$_gpgconf_use_symkey" = 'true' ]]; then
			gpg --quiet -o ${_enc_dir%.gpg} \
			--no-symkey-cache \
			-d ${_enc_dir} \
			&& sucess "${_enc_dir} descriptografado." \
			|| die "Não foi possível descriptografar: ${_enc_dir}."
		else
			gpg --quiet \
			-o ${_enc_dir%.gpg} \
			-d \
			--recipient ${_gpgconf_recipient} \
			${_enc_dir} \
			&& sucess "${_enc_dir} descriptografado." \
			|| die "Não foi possível descriptografar: ${_enc_dir}."
		fi

		tar -xf ${_enc_dir%.gpg} \
		&& sucess "${_enc_dir%.gpg} descompactado." \
		|| die "Não foi possível compactar: ${_enc_dir} e ${_enc_dir%.gpg}."

		rm -r ${_enc_dir} ${_enc_dir%.gpg} \
		&& sucess "${_enc_dir} e ${_enc_dir%.gpg} removidos." \
		|| die "Não foi possível remover: ${_enc_dir} e ${_enc_dir%.gpg}."

		sucess "${_enc_dir} descriptografado com sucesso."
	;;

	-e) # criptografando
		cd "$_ckx_data"

		if [[ -d "${_enc_dir}" ]]; then
			declare _enc_dir_1="${_enc_dir}.tar"
			declare _enc_dir_2="${_enc_dir}"
		else
			declare _enc_dir_1="${_enc_dir%.gpg}"
			declare _enc_dir_2="${_enc_dir%.tar.gpg}"
		fi

		tar -cf ${_enc_dir_1} ${_enc_dir_2} \
		&& sucess "${_enc_dir_2} compactado." \
		|| die "Não foi possível compactar: ${_enc_dir_2}."

		if [[ "$_gpgconf_use_symkey" = 'true' ]]; then
			if [[ "$s2k_mode" = '3' ]]; then
				gpg --no-symkey-cache \
				--s2k-mode ${s2k_mode} \
				--s2k-count ${s2k_count} \
				--s2k-digest-algo ${s2k_digest_algo} \
				--s2k-cipher-algo ${s2k_cipher_algo} \
				-c ${_enc_dir_1} \
				&& sucess "${_enc_dir_1} criptografado com ${s2k_cipher_algo}." \
				|| die "Não foi possível criptografar: ${_enc_dir_1}."
			else
				gpg --no-symkey-cache \
				--s2k-mode ${s2k_mode} \
				--s2k-digest-algo ${s2k_digest_algo} \
				--s2k-cipher-algo ${s2k_cipher_algo} \
				-c ${_enc_dir_1} \
				&& sucess "${_enc_dir_1} criptografado com ${s2k_cipher_algo}." \
				|| die "Não foi possível criptografar: ${_enc_dir_1}."
			fi
		else
			gpg --encrypt \
			-o ${_enc_dir_1}.gpg \
			--recipient ${_gpgconf_recipient} \
			${_enc_dir_1} \
			&& sucess "${_enc_dir_1} criptografado com sua chave privada." \
			|| die "Não foi possível criptografar: ${_enc_dir_1}."
		fi

		rm -r ${_enc_dir_1} ${_enc_dir_2} \
		&& sucess "${_enc_dir_1} e ${_enc_dir_2} removidos." \
		|| die "Não foi possível remover: ${_enc_dir_1} e ${_enc_dir_2}."

		sucess "${_enc_dir} criptografado com sucesso."
	;;

	esac
}

display_main_help()
{
	msg "SELECT -> seleciona um diretório (SELECT 'dir')"
	msg "CREATE -> cria um novo diretório (CREATE 'dir')"
	msg "REMOVE -> remove um diretório    (REMOVE 'dir')"
	msg "LIST   -> lista os diretórios"
	msg "CLEAR  -> limpa a tela"
	msg "HELP   -> exibe os comandos"
	msg "EXIT   -> sai do software"
}

main()
{
	local _main_command __main__ __main2__ _main_yorn

	cd "$_ckx_data"

	msg "diretórios disponíveis:"
	msg ""
	for i in *; {
		if [[ -d "$i" ]]; then
			msg "\e[1;31m[!] ${i##*/} (descriptografado)\e[m"
		elif [[ -e "$i" ]]; then
			msg "\e[1;32m[+] ${i##*/}\e[m"
		else
			shift
		fi
	}
	msg ""

	display_main_help

	while :; do
		read -ep 'ckx-database > ' __main__ __main2__

		__main2__="${__main2__%/}"

		case "${__main__,,}" in

		sel*|cd)
			if [[ -d "$__main2__" ]]; then
				break
			elif [[ -e "$__main2__" ]]; then
				function_main_encrypt -d "$__main2__"
				break
			else
				warn "${__main2__} não encontrado... digite novamente"
			fi
		;;

		cr*)
			if [[ ! -d "$__main2__" ]]; then
				mkdir "$__main2__" \
				&& sucess "${__main2__} -> criado com sucesso." \
				|| die "não foi possível criar: ${__main2__}."
				break
			else
				warn "${__main2__} já existe"
			fi
		;;

		rem*|rm)
			[[ -e "$__main2__" ]] || [[ -d "$__main2__" ]] || {
				warn "${__main2__} não foi encontrado..."
				continue
			}

			warn "você deseja remover ${__main2__}? (yes/N*)"
			read _main_yorn

			case "$_main_yorn" in
				yes)
					warn "você tem certeza? (yes/N*)"
					read _main_yorn

					case "$_main_yorn" in
						yes)
							rm -rf "$__main2__" \
							&& sucess "${__main2__} removido com sucesso." \
							|| die "Não foi possível remover: ${__main2__}."
						;;

						*)
							warn "operação cancelada"
						;;
					esac
				;;

				*)
					warn "operação cancelada"
				;;
			esac
		;;

		lis*|ls)
			for i in *; {
				if [[ -d "$i" ]]; then
					msg "\e[1;31m[+] ${i##*/} (descriptografado)\e[m"
				elif [[ -e "$i" ]]; then
					msg "\e[1;32m[+] ${i##*/}\e[m"
				else
					shift
				fi
			}
		;;

		h*)
			display_main_help
		;;

		cl*)
			clear
		;;

		exit)
			exit "${_ckx_true}"
		;;

		*)
			warn "comando ${__main__} não encontrado..."
		;;

		esac
	done

	cd "${__main2__%.tar.gpg}"

	# desativando CTRL+C
	trap "echo ou utilize o comando 'exit' para sair ou 'break' para forçar saída." SIGINT SIGQUIT

	msg "\e[1;31m"
	msg '             ▄▄█▀▀▀█▄█████▀ ▀███▀▀███▀   ▀██▀'
	msg '           ▄██▀     ▀█ ██   ▄█▀    ███▄  ▄█'
	msg '           ██▀       ▀ ██ ▄█▀       ▀██▄█▀'
	msg '           ██          █████▄         ███'
	msg '           ██▄         ██  ███      ▄█▀▀██▄'
	msg '           ▀██▄     ▄▀ ██   ▀██▄   ▄█   ▀██▄'
	msg '             ▀▀█████▀▄████▄   ███▄██▄▄  ▄▄███▄'
	msg " a soldier's bravery is only recognized on the battlefield"
	msg "               --||////[CRYPTOKNIGHTX]////>"
	msg "\e[m"

	while :; do
		read -ep $'\e[1;31m<ckx>\e[m ' _main_command

		case "$_main_command" in

		exit|quit)
			trap ' ' SIGINT SIGQUIT

			function_main_encrypt -e "$__main2__"

			cd "$_global_cdpath"

			trap - SIGINT SIGQUIT

			exit "$_ckx_true"
		;;

		*)
			eval "${_main_command}"
		;;

		esac # esac _main_command
	done # while main
}


#----------------------------------------------------------------------------------+
####################################### SCRIPT #####################################

if [[ "$#" = '0' ]]; then

	short_license

else
	case "$1" in

		-s|--start) main ;;

		-h|--help) display_help ;;

		-l|--license) display_license ;;

		-v|--version) display_version ;;

		--configure-encryption) libgpgconf ;;

		-E|--encrypt)
			[[ -d "${2}" ]] && die "Não pode criptografar um diretório."

			gpg --no-symkey-cache \
			--s2k-mode 3 \
			--s2k-count ${s2k_count} \
			--s2k-digest-algo ${s2k_digest_algo} \
			--s2k-cipher-algo ${s2k_cipher_algo} \
			-c ${2} \
			&& sucess "${2} foi criptografado com sucesso." \
			|| die "Não foi possível criptografar: ${2}."

			exit "${_ckx_true}"
		;;

		-D|--decrypt)
			[[ -d "${2}" ]] && die "não pode descriptografar um diretório"

			gpg --no-symkey-cache \
			-d ${2} > ${2%.gpg} \
			&& sucess "${2} foi descriptografado com sucesso." \
			|| die "Não foi possível descriptografar: ${2}."

			exit "${_ckx_true}"
		;;

		*) display_error "$1" ;;

	esac
fi

exit "$_ckx_true"

##################################### END SCRIPT ###################################
#----------------------------------------------------------------------------------+
